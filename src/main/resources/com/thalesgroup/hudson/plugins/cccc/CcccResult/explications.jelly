<!--
/*******************************************************************************
* Copyright (c) 2009 Thales Corporate Services SAS                             *
* Author : Gregory Boissinot                                                   *
*                                                                              *
* Permission is hereby granted, free of charge, to any person obtaining a copy *
* of this software and associated documentation files (the "Software"), to deal*
* in the Software without restriction, including without limitation the rights *
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell    *
* copies of the Software, and to permit persons to whom the Software is        *
* furnished to do so, subject to the following conditions:                     *
*                                                                              *
* The above copyright notice and this permission notice shall be included in   *
* all copies or substantial portions of the Software.                          *
*                                                                              *
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR   *
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,     *
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  *
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER       *
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,*
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN    *
* THE SOFTWARE.                                                                *
*******************************************************************************/
-->
<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler"
         xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson"
         xmlns:f="/lib/form" xmlns:i="jelly:fmt">
    <l:layout norefresh="true">
        <st:include it="${it.owner}" page="sidepanel.jelly"/>
        <l:main-panel>


            <table class="pane sortable" id="explications">
                <tr>
                    <td class="pane-header">Tag</td>
                    <td class="pane-header" style="width:2em">Metric Name</td>
                    <td class="pane-header" style="width:2em">Description</td>
                </tr>
                <tbody>

                    <tr>
                        <td class="pane">LOC</td>
                        <td class="pane">Lines of Code</td>
                        <td class="pane" with="20%">
                            <p>This metric counts the lines of non-blank, non-comment source code in a function (LOCf),
                                module (LOCm), or project (LOCp). LOC was one of the earliest metrics to come into use
                                (principally because it is straightforward to measure).
                            </p>
                            <p>It has an obvious relation to the size or complexity of a piece of code, and</p>
                            <p>can be calibrated for use in prediction of maintenance effort, although concern has been
                                expressed that use of this metric as a measure of programmer productivity may tend to
                                encourage verbose programming practises and discourage desirable simplification.
                            </p>
                        </td>
                    </tr>

                    <tr>
                        <td class="pane">MVG</td>
                        <td class="pane">McCabe's Cyclomatic Complexity</td>
                        <td class="pane" with="20%">
                            <P>A measure of a body of code based on analysis of the cyclomatic
                                complexity of the directed acyclic graph which represents the flow
                                of control within each function. First proposed as a measure of
                                the minimum number of test cases to ensure all parts of each
                                function are exercised, it is now widely accepted as a measure for
                                the detection of code which is likely to be error-prone and/or
                                difficult to maintain.
                            </P>
                        </td>
                    </tr>

                    <tr>
                        <td class="pane">COM</td>
                        <td class="pane">Comment Lines</td>
                        <td class="pane" with="20%">
                            <P>A crude measure comparable to LOC of the extent of commenting
                                within a region of code. Not very meaningful in isolation, but
                                sometimes used in ratio with LOC or MVG to ensure that comments
                                are distributed proportionately to the bulk or complexity of a
                                region of code.
                            </P>
                        </td>
                    </tr>

                    <tr>
                        <td class="pane">FO,FOc,FOv,FI,FIc,FIc</td>
                        <td class="pane">Fan-out, Fan-in</td>
                        <td class="pane" with="20%">
                            <P>For a given module A, the fan-out is the number of other
                                modules which the module A uses, while the fan-in is the number of
                                other modules which use A.<BR/>See the section below on counting
                                methods for a discussion of the distinction between the variants
                                on each of these measures. these figures.
                            </P>
                        </td>
                    </tr>

                    <tr>
                        <td class="pane">NOM</td>
                        <td class="pane">Number of modules</td>
                        <td class="pane" with="20%">
                            <P>Number of modules identified in the project. See discussion
                                below about what constitutes a module.
                            </P>
                        </td>
                    </tr>

                    <tr>
                        <td class="pane">WMC</td>
                        <td class="pane">Weighted methods per class</td>
                        <td class="pane" with="20%">
                            <P>This measure, proposed by Chidamber and Kemerer, is a count of
                                the number of functions defined in a module multiplied by a
                                weighting factor. The only weighting algorithm suggested in the
                                original formulation is a uniform weighting of one unit per
                                function.
                            </P>
                        </td>
                    </tr>

                    <tr>
                        <td class="pane">REJ</td>
                        <td class="pane">Rejected lins</td>
                        <td class="pane" with="20%">
                            <P>This is a measure of the number of non-blank non-comment lines
                                of code which was not successfully analysed by the parser. This is
                                more of a validity check on the report generated than a metric of
                                the code submitted: if the amount of code rejected was more than a
                                small fraction (say 10%) of the total code processed, the
                                meaningfulness of the numbers generated by the run must be in
                                doubt.
                            </P>
                        </td>
                    </tr>

                </tbody>
            </table>

        </l:main-panel>
    </l:layout>
</j:jelly>